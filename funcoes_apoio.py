# -*- coding: utf-8 -*-
"""Funcoes_Apoio.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Q508ZCx9hEekFBLU0OlZpfCo9c6taj1I

# Notebook para agrupar funções utilitárias

## Definições dos imports
"""

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import pdb
from google.colab import drive

"""## Função para geração do portfólio"""

def Gerar_Dataframe_Portfolio(df_acoes, df_fiis, df_renda_fixa, eh_tratar_NaN):
  df_portfolio = df_acoes.join(df_fiis)
  df_portfolio = df_portfolio.join(df_renda_fixa)

  if (eh_tratar_NaN):
    df_portfolio = df_portfolio.loc[:, df_portfolio.isnull().mean() <= .1]
    mean = df_portfolio.mean()
    df_portfolio.fillna(mean, inplace=True)

  return df_portfolio.round(2)

"""## Função para criar dataframe a partir de arquivo CSV"""

def CriarDataFrameFromCSV(csv_file):
  return pd.read_csv(csv_file)

"""## Função para o cálculo de covariância"""

def Gerar_Matrix_Covariancia(df_ativos):
  result_cov = df_ativos.cov()
  dfresult_cov = pd.DataFrame(result_cov, columns=df_ativos.columns)
  return dfresult_cov

"""## Função para a geração de visualização de correlação"""

def Gerar_visualizacao_correlacao(df):
  fig, ax = plt.subplots(figsize=(26,26))
  ax = sns.heatmap(df.corr(), xticklabels=df.columns, yticklabels=df.columns ,annot=True, linewidths=.5, ax=ax)

"""## Função para cálculo de retorno acumulado por ativo do portfólio"""

def Gerar_retorno_por_ativo_portfolio(df_portfolio):
  retornos = df_portfolio.sum()
  return retornos

"""## Função para cálculo de retono acumulado do portfólio"""

def RetornoPortfolio(df_pesos, df_retorno_acumulado_por_ativo):
  df_pesos_t = df_pesos.transpose()
  df_pesos_t = df_pesos_t.sort_index()
  df_retorno_acumulado_por_ativo = df_retorno_acumulado_por_ativo.sort_index()
  df_pesos_t.index = df_retorno_acumulado_por_ativo.index
  retorno_por_ativo = df_retorno_acumulado_por_ativo[df_retorno_acumulado_por_ativo.columns].multiply(df_pesos_t.iloc[:,0], axis="index")
  return retorno_por_ativo.sum()[0]

def RetornoPortfolio2(df_pesos, df_retorno_acumulado_por_ativo):
  df_pesos_t = df_pesos.transpose()
  df_pesos_t = df_pesos_t.sort_index()
  df_retorno_acumulado_por_ativo = df_retorno_acumulado_por_ativo.sort_index()
  df_pesos_t.index = df_retorno_acumulado_por_ativo.index
  retorno_por_ativo = df_retorno_acumulado_por_ativo[df_retorno_acumulado_por_ativo.columns].multiply(df_pesos_t.iloc[:,0], axis="index")
  return retorno_por_ativo

"""## Função para importação dos dados e geração dos arquivos CSV"""

def importar_dados(Dados_Planilha_Ativos, Dados_Ativos_Renda_Variavel,Dados_Titulos_Publicos,Dados_benchmark,data_inicio,data_fim):


  # Importação dos dados disponíveis na planilha
  dadosPlanilhaCarteiraInvestimentos = Dados_Planilha_Ativos.RecuperarDadosPlanilhaAtivos()

  # Importação dos retornos de ativos negociados na bolsa de valores
  dadosRetornosAtivosNegociadosBolsaBrasileira = Dados_Ativos_Renda_Variavel.buscarRetornosAtivosNegociadosBolsaBrasileira(dadosPlanilhaCarteiraInvestimentos,data_inicio,data_fim)

  # Importação dos retornos dos títulos públicos brasileiros
  dadosRetornosTitulosPublicos = Dados_Titulos_Publicos.buscarRetornosTitulosPublicos(dadosPlanilhaCarteiraInvestimentos, data_inicio,data_fim)

  # Merge dos retornos de renda variável e fixa com NaN
  dados_retornos_Dataframe_Portfolio_NaN = Gerar_Dataframe_Portfolio(dadosRetornosAtivosNegociadosBolsaBrasileira[0], dadosRetornosAtivosNegociadosBolsaBrasileira[1], dadosRetornosTitulosPublicos, False)

  # Merge dos retornos de renda variável e fixa tratando os NaN com a média
  dados_retornos_Dataframe_Portfolio = Gerar_Dataframe_Portfolio(dadosRetornosAtivosNegociadosBolsaBrasileira[0], dadosRetornosAtivosNegociadosBolsaBrasileira[1], dadosRetornosTitulosPublicos, True)

  # Dados benchmark IBOVESPA
  dados_benchmark_IBOVESPA = Dados_benchmark.buscarRetornoBenchmarkIBOVESPA(data_inicio,data_fim)
  df_dados_benchmark_IBOVESPA = pd.DataFrame(dados_benchmark_IBOVESPA)
  df_dados_benchmark_IBOVESPA = df_dados_benchmark_IBOVESPA.transpose()


  # Dados benchmark IPCA
  dados_benchmark_IPCA = Dados_benchmark.buscarRetornoBenchmark_IPCA(data_inicio,data_fim)
  df_dados_benchmark_IPCA = pd.DataFrame(dados_benchmark_IPCA)
  # df_dados_benchmark_IPCA = df_dados_benchmark_IPCA.iloc[:,1:]
  # df_dados_benchmark_IPCA = df_dados_benchmark_IPCA.set_index('ano'

  # Dados benchmark SELIC
  dados_benchmark_SELIC = Dados_benchmark.buscarRetornoBenchmark_SELIC(data_inicio,data_fim)
  df_dados_benchmark_SELIC = pd.DataFrame(dados_benchmark_SELIC)

  # Dados benchmark Dólar
  dados_benchmark_Dolar = Dados_benchmark.buscarRetornoBenchmark_Dolar(data_inicio,data_fim)
  df_dados_benchmark_Dolar = pd.DataFrame(dados_benchmark_Dolar)



  # Gerando arquivo Restrições
  dadosPlanilhaCarteiraInvestimentos[3].to_csv('restricoes.csv')

  # Gerando arquivo Restrições
  dadosPlanilhaCarteiraInvestimentos[4].to_csv('carteira_investidor.csv')

  # Gerando arquivo Dataframe_Portfolio_NaN
  dados_retornos_Dataframe_Portfolio_NaN.to_csv('dados_retornos_Dataframe_Portfolio_NaN.csv')

  # Gerando arquivo Dataframe_Portfolio
  dados_retornos_Dataframe_Portfolio.to_csv('dados_retornos_Dataframe_Portfolio.csv')

  # Gerando arquivo Benchmark IBOVESPA
  df_dados_benchmark_IBOVESPA.to_csv('dados_benchmark_IBOVESPA.csv')

  # Gerando arquivo Benchmark IPCA
  df_dados_benchmark_IPCA.to_csv('dados_benchmark_IPCA.csv')


  # Gerando arquivo Benchmark SELIC
  df_dados_benchmark_SELIC.to_csv('dados_benchmark_SELIC.csv')

  # Gerando arquivo BenchmarDólar
  df_dados_benchmark_Dolar.to_csv('dados_benchmark_Dolar.csv')

  # Gerando arquivo com ativos de renda variável da planilha
  lista_df_renda_variavel = []
  lista_df_renda_variavel.append(dadosPlanilhaCarteiraInvestimentos[0])
  lista_df_renda_variavel.append(dadosPlanilhaCarteiraInvestimentos[1])

  tickers_acoes = lista_df_renda_variavel[0].iloc[:,0]
  tickers_acoes = tickers_acoes.to_numpy()

  tickers_fiis = lista_df_renda_variavel[1].iloc[:,0]
  tickers_fiis = tickers_fiis.to_numpy()

  tickers_rv = np.concatenate((tickers_acoes, tickers_fiis))

  tickers_SA = [x + '.SA' for x in tickers_rv]

  df_renda_variavel = pd.DataFrame(tickers_SA)
  df_renda_variavel.to_csv('dados_renda_variavel.csv')

  # Gerando arquivos com as cotações correntes dos ativos da planilha
  df_cotacoes_rf = Dados_Titulos_Publicos.buscarCotacaoAtivoRendaFixa(dadosPlanilhaCarteiraInvestimentos)

  df_cotacoes_rv = Dados_Ativos_Renda_Variavel.buscarCotacaoAtivosRendaVariavel(dadosPlanilhaCarteiraInvestimentos, data_inicio, data_fim)

  df_cotacoes_rf.to_csv('cotacoes_rf.csv')
  df_cotacoes_rv.to_csv('cotacoes_rv.csv')

"""## Função para o cálculo de Utilidade para o Investidor

"""

def UtilidadeInvesidor(retorno_portfolio, coeficiente_aversao_investidor ,df_matrix_covarianvcia,pesos):

  dt_pesos_iniciais_ativos = pd.DataFrame(pesos)
  covarianca_x_pesos = np.matmul(df_matrix_covarianvcia,pesos)
  varianca = np.sum(pesos*covarianca_x_pesos)
  utilidade = retorno_portfolio - (coeficiente_aversao_investidor/2)*varianca

  return utilidade

"""## Função para acertar os pesos da carteira investidor"""

def acertar_pesos_carteira_investidor(df_pesos_carteira_especialista, df_portfolio_otimizacao):

  ativos_especialista_index = df_pesos_carteira_especialista.index
  ativos_especialista_lista = ativos_especialista_index.to_list()

  df_cotacoes_rf = CriarDataFrameFromCSV("cotacoes_rf.csv")
  lista_rf = df_cotacoes_rf.iloc[:,0].to_list()
  lista_rf_upper = list(map(lambda x: x.upper(), lista_rf))
  lista_rf_upper = list(set(ativos_especialista_lista) & set(lista_rf_upper))

  df_cotacoes_rv = CriarDataFrameFromCSV("cotacoes_rv.csv")
  lista_rv = df_cotacoes_rv.iloc[:,0].to_list()
  lista_rv = [s.replace('.SA', '') for s in lista_rv]
  lista_rv_SA = list(set(ativos_especialista_lista) & set(lista_rv))
  lista_rv_SA = [x + '.SA' for x in lista_rv_SA]

  df_rv = df_portfolio_otimizacao[np.intersect1d(df_portfolio_otimizacao.columns, lista_rv_SA)]
  df_rf = df_portfolio_otimizacao[np.intersect1d(df_portfolio_otimizacao.columns, lista_rf)]

  df_join_rv_rf_especialista = df_rv.join(df_rf)

  df_join_rv_rf_especialista_t = df_join_rv_rf_especialista.transpose()

  df_join_rv_rf_especialista_t.sort_index(inplace=True)

  df_pesos_carteira_especialista.sort_index(inplace=True)

  df_pesos_carteira_especialista.index = df_join_rv_rf_especialista_t.index

  return df_pesos_carteira_especialista

"""## Função para acertar nomes de ativos carteira especialista"""

def acertar_nomes_ativos_carteira_investidor(df_carteira, df_portfolio_otimizacao):

  ativos_especialista_index = df_carteira.index
  ativos_especialista_lista = ativos_especialista_index.to_list()

  df_cotacoes_rf = CriarDataFrameFromCSV("cotacoes_rf.csv")
  lista_rf = df_cotacoes_rf.iloc[:,0].to_list()
  lista_rf_upper = list(map(lambda x: x.upper(), lista_rf))
  lista_rf_upper = list(set(ativos_especialista_lista) & set(lista_rf_upper))

  df_cotacoes_rv = CriarDataFrameFromCSV("cotacoes_rv.csv")
  lista_rv = df_cotacoes_rv.iloc[:,0].to_list()
  lista_rv = [s.replace('.SA', '') for s in lista_rv]
  lista_rv_SA = list(set(ativos_especialista_lista) & set(lista_rv))
  lista_rv_SA = [x + '.SA' for x in lista_rv_SA]

  df_rv = df_portfolio_otimizacao[np.intersect1d(df_portfolio_otimizacao.columns, lista_rv_SA)]
  df_rf = df_portfolio_otimizacao[np.intersect1d(df_portfolio_otimizacao.columns, lista_rf)]

  df_portfolio = df_rv.join(df_rf)

  return df_portfolio

"""## Função para obter retorno de um portfólio ano a ano"""

def gerar_retorno_portfolio_por_ano(nome_estrategia,df_pesos, df_ativos):
  df_carteira_pesos = df_pesos
  df_portfolio_ativos = df_ativos

  ativos_especialista_index = df_carteira_pesos.index
  ativos_especialista_lista = ativos_especialista_index.to_list()

  df_portfolio_estrategia = df_portfolio_ativos[np.intersect1d(df_portfolio_ativos.columns, ativos_especialista_lista)]

  df_carteira_pesos_sorted = df_carteira_pesos.sort_index()

  df_carteira_pesos_sorted_t = df_carteira_pesos_sorted.transpose()

  df_portfolio_estrategia_t = df_portfolio_estrategia.transpose()

  if nome_estrategia == 'Naive':
    df_portfolio_estrategia_t['pesos'] = df_carteira_pesos_sorted
  elif nome_estrategia == 'Investidor':
    df_portfolio_estrategia_t['pesos'] = df_carteira_pesos_sorted.squeeze()
  else:
    df_portfolio_estrategia_t['pesos'] = df_carteira_pesos_sorted[0]

  df_portfolio_estrategia_t_for = df_portfolio_estrategia_t
  for c in df_portfolio_estrategia_t_for:
    if c != 'pesos':
      df_portfolio_estrategia_t_for[c] = df_portfolio_estrategia_t_for[c]* df_portfolio_estrategia_t_for['pesos']

  del df_portfolio_estrategia_t_for[df_portfolio_estrategia_t_for.columns[-1]]

  df_portfolio_estrategia_t_for = df_portfolio_estrategia_t_for.transpose()

  sum_rows = df_portfolio_estrategia_t_for.sum(axis=1)

  df_portfolio_estrategia_t_for[nome_estrategia] = sum_rows

  df_portfolio_estrategia_t_for = df_portfolio_estrategia_t_for[[nome_estrategia]]

  return df_portfolio_estrategia_t_for

"""## Função para apresentação dos resultados"""

def apresentacao_resultados(df_carteira_pr_x_anos,df_carteira_cvm_x_anos,df_carteira_naive_x_anos,df_carteira_especialista_x_anos,df_dados_benchmark_IBOVESPA,df_dados_benchmark_IPCA,df_dados_benchmark_SELIC,df_dados_benchmark_Dolar):
  df_resultado = df_carteira_pr_x_anos.join(df_carteira_cvm_x_anos)
  df_resultado = df_resultado.join(df_carteira_naive_x_anos)
  df_resultado = df_resultado.join(df_carteira_especialista_x_anos)
  df_resultado = df_resultado.join(df_dados_benchmark_IBOVESPA)
  df_resultado = df_resultado.join(df_dados_benchmark_IPCA)
  df_resultado = df_resultado.join(df_dados_benchmark_SELIC)
  df_resultado = df_resultado.join(df_dados_benchmark_Dolar)
  return df_resultado